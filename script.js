// ===== CONFIGURATION =====
const CONFIG = {
	// Google Sheets ID
	SHEET_ID: '1bwb3FdARKocw-bcC7owItLsl4dz_xd70_8nvgkySPo0',

	// Cloudinary configuration (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	CLOUDINARY: {
		cloud_name: 'your_cloud_name', // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Cloudinary cloud_name
		base_url: 'https://res.cloudinary.com/your_cloud_name/image/upload/f_auto,q_auto/'
	},

	// Cache settings
	CACHE_DURATION: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç

	// Navigation settings
	SCROLL_OFFSET: 10, // –û—Ç—Å—Ç—É–ø –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–∏
};

// ===== API ENDPOINTS =====
const API_BASE = `https://opensheet.elk.sh/${CONFIG.SHEET_ID}`;

const ENDPOINTS = {
	categories: `${API_BASE}/Categories`,
	menu: `${API_BASE}/Menu`,
	locations: `${API_BASE}/Locations`
};

// ===== DATA LOADING =====
class DataService {
	constructor() {
		this.cache = new Map();
	}

	async loadData(endpoint, cacheKey) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
		const cached = this.cache.get(cacheKey);
		if (cached && Date.now() - cached.timestamp < CONFIG.CACHE_DURATION) {
			// console.log(`Using cached data for ${cacheKey}`);
			return cached.data;
		}

		try {
			// console.log(`Loading data from ${endpoint}`);
			const response = await fetch(endpoint);

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}

			const data = await response.json();
			const filteredData = data.filter(item => item.name && item.name.trim());

			// –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
			this.cache.set(cacheKey, {
				data: filteredData,
				timestamp: Date.now()
			});

			return filteredData;
		} catch (error) {
			console.error(`Error loading data from ${endpoint}:`, error);
			throw error;
		}
	}

	async loadCategories() {
		return this.loadData(ENDPOINTS.categories, 'categories');
	}

	async loadMenu() {
		return this.loadData(ENDPOINTS.menu, 'menu');
	}

	async loadLocations() {
		return this.loadData(ENDPOINTS.locations, 'locations');
	}
}

// ===== ANIMATION OBSERVER =====
class AnimationObserver {
    constructor() {
        this.observer = null;
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Intersection Observer
        if ('IntersectionObserver' in window) {
            this.observer = new IntersectionObserver(
                (entries) => this.handleIntersection(entries),
                {
                    threshold: 0.3, // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–≥–¥–∞ 30% —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–¥–Ω–æ
                    rootMargin: '0px 0px 0px 0px' // –ë–µ–∑ –æ—Ç—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω
                }
            );
        }
    }

    handleIntersection(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // console.log('Element in view:', entry.target.id || entry.target.className);
                this.animateElement(entry.target);
                // –£–±–∏—Ä–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                this.observer.unobserve(entry.target);
            }
        });
    }

    animateElement(element) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å in-view –¥–ª—è –≤—Å–µ—Ö –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (element.classList.contains('animate-from-left') || element.classList.contains('animate-from-right')) {
            element.classList.add('in-view');
        }
    }

    observeElements() {
        if (!this.observer) return;

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —Å–µ–∫—Ü–∏—è–º–∏ —Å –∫–ª–∞—Å—Å–∞–º–∏ animate-from-left –∏ animate-from-right
        const sections = document.querySelectorAll('.menu-category.animate-from-left, .menu-category.animate-from-right, .locations-section.animate-from-right, .locations-section.animate-from-left');
        // sections.forEach(section => {
        //     this.observer.observe(section);
        //     // console.log('Observing section:', section.id);
        // });
				//
        // // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó"
        // const holodniNapoiSection = document.getElementById('holodni-napoi');
        // if (holodniNapoiSection) {
        //     // console.log('Explicitly observing holodni-napoi section');
        //     this.observer.observe(holodniNapoiSection);
        // } else {
        //     console.error('holodni-napoi section not found!');
        // }

	    sections.forEach(section => {
		    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ–∫—Ü—ñ—è –≤–∂–µ –≤–∏–¥–∏–º–∞
		    const rect = section.getBoundingClientRect();
		    const isVisible = rect.top < window.innerHeight && rect.bottom > 0;

		    if (isVisible) {
			    // console.log('Element already visible on init:', section.id);
			    this.animateElement(section);
		    } else {
			    this.observer.observe(section);
			    // console.log('Observing section:', section.id);
		    }
	    });

    }
}
// ===== NAVIGATION =====
class Navigation {
	constructor() {
		this.sidebar = document.getElementById('sidebar');
		this.sidebarContent = this.sidebar.querySelector('.sidebar-content');
		this.activeSection = null;
		this.isScrolling = false;

		this.init();
	}

	init() {
		this.createScrollTopButton();
		this.setupScrollListener();

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
		setTimeout(() => {
			this.updateActiveSection();
		}, 500);
	}

	createScrollTopButton() {
		const scrollTopBtn = document.createElement('a');
		scrollTopBtn.href = '#top';
		scrollTopBtn.className = 'nav-item scroll-top';
		scrollTopBtn.innerHTML = '‚¨ÜÔ∏è';
		scrollTopBtn.setAttribute('data-tooltip', '–ù–∞–≤–µ—Ä—Ö');
		scrollTopBtn.setAttribute('data-section', 'top'); // –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º data-section
		scrollTopBtn.addEventListener('click', (e) => {
			e.preventDefault();
			this.scrollToTop();
		});

		this.sidebarContent.appendChild(scrollTopBtn);
	}

	renderNavigation(categories) {
		// –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–≤–µ—Ä—Ö")
		const existingItems = this.sidebarContent.querySelectorAll('.nav-item:not(.scroll-top)');
		existingItems.forEach(item => item.remove());

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫ —á—Ç–æ –∏ –≤ –º–µ–Ω—é - —á–µ–±—É—Ä–µ–∫–∏ –ø–µ—Ä–≤—ã–º–∏!
		const activeCategories = Utils.filterActive(categories);

		const sortedCategories = activeCategories.sort((a, b) => {
			// –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç "—á–µ–±—É—Ä–µ–∫" - –æ–Ω–∞ –∏–¥–µ—Ç –ø–µ—Ä–≤–æ–π
			const aIsCheburek = a.name.toLowerCase().includes('—á–µ–±—É—Ä–µ–∫');
			const bIsCheburek = b.name.toLowerCase().includes('—á–µ–±—É—Ä–µ–∫');

			if (aIsCheburek && !bIsCheburek) return -1;
			if (!aIsCheburek && bIsCheburek) return 1;

			// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø–æ –æ–±—ã—á–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
			return parseInt(a.order || 0) - parseInt(b.order || 0);
		});

		// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		sortedCategories.forEach(category => {
			const navItem = this.createNavItem(category);
			this.sidebarContent.insertBefore(navItem, this.sidebarContent.querySelector('.scroll-top'));
		});

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –ª–æ–∫–∞—Ü–∏–π
		const locationsNavItem = this.createNavItem({
			name: '–õ–æ–∫–∞—Ü—ñ—ó',
			icon: 'üìç',
			order: 999
		});
		this.sidebarContent.insertBefore(locationsNavItem, this.sidebarContent.querySelector('.scroll-top'));
	}

	createNavItem(category, customIcon = null) {
		const navItem = document.createElement('a');
		const sectionId = this.getSectionId(category.name);

		navItem.href = `#${sectionId}`;
		navItem.className = 'nav-item';
		navItem.setAttribute('data-section', sectionId);
		navItem.setAttribute('data-tooltip', category.name);

		// –ë–µ—Ä–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
		const icon = customIcon || category.icon || 'üìã';
		navItem.innerHTML = icon;

		navItem.addEventListener('click', (e) => {
			e.preventDefault();
			// console.log('Nav item clicked for section:', sectionId);

			// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
			setTimeout(() => {
				this.scrollToSection(sectionId);
			}, 100);
		});

		return navItem;
	}

	getSectionId(categoryName) {
		// console.log('Input category name:', categoryName);

		// –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
		const translitMap = {
			'–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
			'–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
			'–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
			'—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
			'—ñ': 'i', '—ó': 'i', '—î': 'ye'
		};

		let id = categoryName.toLowerCase();

		// –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
		for (let [cyr, lat] of Object.entries(translitMap)) {
			id = id.replace(new RegExp(cyr, 'g'), lat);
		}

		// –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
		id = id
			.replace(/\s+/g, '-')           // –ø—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
			.replace(/[^\w\-]/g, '')        // —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã
			.replace(/\-+/g, '-')           // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
			.replace(/^\-|\-$/g, '');       // —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
		if (categoryName.includes('–æ–∫–∞—Ü—ñ') || categoryName.includes('–õ–æ–∫–∞—Ü—ñ')) {
			id = 'locations';
		}

		// console.log('Generated section ID for', categoryName, '‚Üí', id);
		return id || 'section'; // fallback –µ—Å–ª–∏ ID –ø—É—Å—Ç–æ–π
	}

	scrollToSection(sectionId) {
		// console.log('=== SCROLL DEBUG ===');
		// console.log('Trying to scroll to section:', sectionId);

		// –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
		const allSections = document.querySelectorAll('[id]');
		// console.log('All elements with IDs:', Array.from(allSections).map(el => el.id));

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó"
		if (sectionId === 'holodni-napoi') {
			// console.log('Special handling for holodni-napoi section');
		}

		const element = document.getElementById(sectionId);
		// console.log('Found element:', element);

		if (element) {
			this.isScrolling = true;

			const elementPosition = element.offsetTop;
			// console.log('Element offsetTop:', elementPosition);

			const offsetPosition = Math.max(0, elementPosition - 100); // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
			// console.log('Scroll to position:', offsetPosition);

			window.scrollTo({
				top: offsetPosition,
				behavior: 'smooth'
			});

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é —Å—Ä–∞–∑—É
			this.setActiveNavItem(sectionId);

			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
			setTimeout(() => {
				this.isScrolling = false;
				this.updateActiveSection(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞
				// console.log('Scroll completed');

				// –î–ª—è "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó" –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
				if (sectionId === 'holodni-napoi') {
					const section = document.getElementById('holodni-napoi');
					if (section && !section.classList.contains('in-view')) {
						// console.log('Adding in-view class to holodni-napoi section');
						section.classList.add('in-view');
					}
				}
			}, 1000);
		} else {
			console.error('Section not found! ID:', sectionId);
			// console.log('Available sections:', document.querySelectorAll('.menu-category, .locations-section'));

			// –ï—Å–ª–∏ —ç—Ç–æ "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó", –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–ª–∞—Å—Å—É
			if (sectionId === 'holodni-napoi') {
				const sections = document.querySelectorAll('.menu-category');
				sections.forEach(section => {
					// console.log('Section:', section.id, section.className);
				});

				// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
				const titles = document.querySelectorAll('.category-title');
				titles.forEach(title => {
					// console.log('Title:', title.textContent, title.parentElement.id);
					if (title.textContent.includes('–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó')) {
						// console.log('Found holodni-napoi section by title!');
						const section = title.parentElement;
						this.scrollToElement(section);
					}
				});
			}
		}

		// console.log('=== END SCROLL DEBUG ===');
	}

	// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
	scrollToElement(element) {
		if (!element) return;

		this.isScrolling = true;

		const elementPosition = element.offsetTop;
		// console.log('Element offsetTop:', elementPosition);

		const offsetPosition = Math.max(0, elementPosition - 100);
		// console.log('Scroll to position:', offsetPosition);

		window.scrollTo({
			top: offsetPosition,
			behavior: 'smooth'
		});

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é —Å—Ä–∞–∑—É
		if (element.id) {
			this.setActiveNavItem(element.id);
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
		setTimeout(() => {
			this.isScrolling = false;
			this.updateActiveSection();
			// console.log('Scroll completed');

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å in-view –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
			if (element.classList.contains('animate-from-left') || element.classList.contains('animate-from-right')) {
				// console.log('Adding in-view class to element');
				element.classList.add('in-view');
			}
		}, 1000);
	}

	scrollToTop() {
		// console.log('Scrolling to top');
		this.isScrolling = true;

		window.scrollTo({
			top: 0,
			behavior: 'smooth'
		});

		// –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –Ω–∞ "top"
		this.setActiveNavItem('top');

		setTimeout(() => {
			this.isScrolling = false;
			// –ù–µ –≤—ã–∑—ã–≤–∞–µ–º updateActiveSection –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
			// console.log('Scroll to top completed');
		}, 1000);
	}

	setupScrollListener() {
		let ticking = false;

		window.addEventListener('scroll', () => {
			if (!ticking) {
				requestAnimationFrame(() => {
					if (!this.isScrolling) {
						this.updateActiveSection();
					}
					ticking = false;
				});
				ticking = true;
			}
		});

		// –¢–∞–∫–∂–µ —Å–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM
		window.addEventListener('load', () => {
			setTimeout(() => this.updateActiveSection(), 1000);
		});
	}

	updateActiveSection() {
		const sections = document.querySelectorAll('.menu-category, .locations-section');
		const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
		const windowHeight = window.innerHeight;
		const documentHeight = document.documentElement.scrollHeight;

		// // console.log('Current scroll position:', scrollTop);
		// // console.log('Window height:', windowHeight, 'Document height:', documentHeight);

		let activeSection = null;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		const isAtBottom = (scrollTop + windowHeight) >= (documentHeight - 50);
		if (isAtBottom) {
			// –ï—Å–ª–∏ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é (–ª–æ–∫–∞—Ü–∏–∏)
			const lastSection = sections[sections.length - 1];
			if (lastSection) {
				activeSection = lastSection.id;
				// console.log('Active section: bottom ->', activeSection);
			}
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		else if (scrollTop < 10) {
			activeSection = 'top';
			// console.log('Active section: top (scroll position < 250)');
		}
		// –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
		else {
			let closestSection = 'chebureki';
			let closestDistance = Infinity;
			let holodniNapoiVisible = false;
			let holodniNapoiDistance = Infinity;

			sections.forEach(section => {
				const rect = section.getBoundingClientRect();

				// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ö–∞ —ç–∫—Ä–∞–Ω–∞ –¥–æ —Å–µ–∫—Ü–∏–∏
				const distanceFromTop = Math.abs(rect.top - 10);

				// –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –≤–∏–¥–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
				if (rect.top <= 20 && rect.bottom > 10) {
					if (distanceFromTop < closestDistance) {
						closestDistance = distanceFromTop;
						closestSection = section.id;
					}

					// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó"
					if (section.id === 'holodni-napoi') {
						holodniNapoiVisible = true;
						holodniNapoiDistance = distanceFromTop;
						// console.log('holodni-napoi section is visible, distance:', distanceFromTop);

						// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ–∫—Ü–∏—è –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å in-view –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
						if (!section.classList.contains('in-view')) {
							// console.log('Adding in-view class to holodni-napoi section');
							section.classList.add('in-view');
						}
					}
				}

				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó" —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
				if (section.id === 'holodni-napoi' && rect.top <= 300 && rect.bottom > 0) {
					// console.log('holodni-napoi section is in extended visible range');

					// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ–∫—Ü–∏—è –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å in-view –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
					if (!section.classList.contains('in-view')) {
						// console.log('Adding in-view class to holodni-napoi section (extended range)');
						section.classList.add('in-view');
					}
				}
			});

			// –ï—Å–ª–∏ "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó" –≤–∏–¥–Ω–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö—É, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –µ—ë
			if (holodniNapoiVisible && holodniNapoiDistance < closestDistance + 10) {
				closestSection = 'holodni-napoi';
				// console.log('Prioritizing holodni-napoi section as active');
			}

			if (closestSection) {
				activeSection = closestSection;
				// console.log('Active section:', activeSection, 'distance:', closestDistance);
			}
		}

		if (activeSection && activeSection !== this.activeSection) {
			this.setActiveNavItem(activeSection);

			// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó", —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞
			if (activeSection === 'holodni-napoi') {
				const section = document.getElementById('holodni-napoi');
				if (section && !section.classList.contains('in-view')) {
					// console.log('Adding in-view class to holodni-napoi section (active section changed)');
					section.classList.add('in-view');
				}
			}
		}
	}

	setActiveNavItem(sectionId) {
		if (this.activeSection === sectionId) return;

		// console.log('Setting active nav item:', sectionId);

		// –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
		this.sidebarContent.querySelectorAll('.nav-item').forEach(item => {
			item.classList.remove('active');
		});

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
		const activeItem = this.sidebarContent.querySelector(`[data-section="${sectionId}"]`);
		if (activeItem) {
			activeItem.classList.add('active');
			// console.log('Activated nav item for section:', sectionId);
		} else {
			// console.log('Nav item not found for section:', sectionId);
		}

		this.activeSection = sectionId;
	}
}

const Utils = {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç image_url, fallback –Ω–∞ Cloudinary)
	getImageUrl(item) {
		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		if (item.image_url && item.image_url.trim()) {
			return item.image_url.trim();
		}

		// Fallback –Ω–∞ Cloudinary, –µ—Å–ª–∏ –µ—Å—Ç—å cloudinary_id
		if (item.cloudinary_id && CONFIG.CLOUDINARY.cloud_name !== 'your_cloud_name') {
			return `${CONFIG.CLOUDINARY.base_url}${item.cloudinary_id}`;
		}

		return null;
	},

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	filterActive(items) {
		return items.filter(item => item.active === 'TRUE' || item.active === true);
	},

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
	sortByOrder(items) {
		return items.sort((a, b) => parseInt(a.order || 0) - parseInt(b.order || 0));
	},

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	groupByCategory(menuItems) {
		const grouped = {};
		menuItems.forEach(item => {
			const category = item.category;
			if (!grouped[category]) {
				grouped[category] = [];
			}
			grouped[category].push(item);
		});
		return grouped;
	},

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
	formatPrice(price) {
		if (!price) return '';
		return price.toString().includes('‚Ç¥') ? price : `${price} ‚Ç¥`;
	}
};

// ===== RENDERING =====
class Renderer {
	constructor() {
		this.menuContainer = document.getElementById('menu');
		this.locationsContainer = document.getElementById('locations');
		this.loadingElement = document.getElementById('loading');
		this.navigation = new Navigation();
		this.animationObserver = new AnimationObserver(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AnimationObserver
	}

	renderMenu(categories, menuItems) {
		// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
		const activeMenuItems = Utils.filterActive(menuItems);
		const itemsByCategory = Utils.groupByCategory(activeMenuItems);

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ ID —Å–µ–∫—Ü–∏–π
		const categoryMapping = {
			'–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó': 'holodni-napoi',
			'–õ–∏–º–æ–Ω–∞–¥–∏': 'limonadi',
			'–ß–µ–±—É—Ä–µ–∫–∏': 'chebureki',
			'–°–æ–ª–æ–¥–∫—ñ —á–µ–±—É—Ä–µ–∫–∏': 'solodki-chebureki',
			'–î–æ–¥–∞—Ç–∫–∏': 'dodatki'
		};

		// –î–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
		Object.entries(categoryMapping).forEach(([categoryName, sectionId]) => {
			const sectionElement = document.getElementById(sectionId);
			if (!sectionElement) return;

			const menuItemsContainer = sectionElement.querySelector('.menu-items');
			if (!menuItemsContainer) return;

			// –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			const items = itemsByCategory[categoryName] || [];
			const sortedItems = Utils.sortByOrder(items);

			// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
			menuItemsContainer.innerHTML = sortedItems.map(item => this.renderMenuItem(item)).join('');

			// –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
			if (sortedItems.length === 0) {
				sectionElement.style.display = 'none';
			}
		});

		// –†–µ–Ω–¥–µ—Ä–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
		const activeCategories = Utils.filterActive(categories);
		this.navigation.renderNavigation(activeCategories);

		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
		setTimeout(() => {
			// console.log('Menu rendered, checking sections...');
			const sections = document.querySelectorAll('.menu-category');
			// // console.log('Found sections:', Array.from(sections).map(s => s.id));
			this.navigation.updateActiveSection();

			// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
			this.animationObserver.observeElements();

			// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó"
			const holodniNapoiSection = document.getElementById('holodni-napoi');
			if (holodniNapoiSection) {
				// console.log('Special handling for holodni-napoi section after menu render');

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–µ–∫—Ü–∏–∏
				const rect = holodniNapoiSection.getBoundingClientRect();
				const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
				// console.log('holodni-napoi section visibility:', isVisible, 'position:', rect.top, rect.bottom);

				// –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –≤–∏–¥–Ω–∞ –∏–ª–∏ –±–ª–∏–∑–∫–∞ –∫ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å in-view
				if (isVisible || rect.top < window.innerHeight + 200) {
					// console.log('Adding in-view class to holodni-napoi section (initial render)');
					holodniNapoiSection.classList.add('in-view');
				}
			}
		}, 500);
	}

	renderMenuItem(item) {
		const imageUrl = Utils.getImageUrl(item);
		const hasImage = !!imageUrl;

		return `
            <div class="menu-item ${hasImage ? 'with-image' : ''}" data-item="${item.name}">
                ${hasImage ? `<img src="${imageUrl}" alt="${item.name}" class="item-image" loading="lazy" onerror="this.style.display='none';">` : ''}
                <div class="item-content">
                    <div class="item-header">
                        <span class="item-name">${item.name}</span>
                        <span class="item-price">${Utils.formatPrice(item.price)}</span>
                    </div>
                    ${item.volume_weight ? `<div class="item-details">üìè ${item.volume_weight}</div>` : ''}
                    ${item.description ? `<div class="item-details">üìù ${item.description}</div>` : ''}
                </div>
            </div>
        `;
	}

	renderLocations(locations) {
		const activeLocations = Utils.sortByOrder(Utils.filterActive(locations));

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–∫–∞—Ü–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
		const locationCards = activeLocations.map(location => this.renderLocationCard(location)).join('');
		this.locationsContainer.innerHTML += locationCards;

		// –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–π, —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
		if (activeLocations.length === 0) {
			this.locationsContainer.style.display = 'none';
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–π
		setTimeout(() => {
			this.animationObserver.observeElements();
		}, 100);
	}

	renderLocationCard(location) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const hasImage = location.image_url && location.image_url.trim();

		return `
            <div class="location-card ${hasImage ? 'with-image' : ''}">
                ${hasImage ? `
                <div class="location-card-image-container">
                    <img src="${location.image_url}" alt="${location.name}" class="location-card-image" loading="lazy" onerror="this.style.display='none';">
                </div>` : ''}
                <div class="location-card-content">
                    <div class="location-name">${location.name}</div>
                    <div class="location-info">üìç ${location.address}</div>
                    <div class="location-info">üìû <a href="tel:${location.phone}" class="phone">${location.phone}</a></div>
                    ${location.working_hours ? `<div class="location-info">üïí ${location.working_hours}</div>` : ''}
                    ${location.description ? `<div class="location-info">‚ÑπÔ∏è ${location.description}</div>` : ''}
                    ${location.google_maps_url ? `<a href="${location.google_maps_url}" target="_blank" class="maps-link">–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Google Maps</a>` : ''}
                </div>
            </div>
        `;
	}

	showError(message) {
		this.loadingElement.innerHTML = `
            <div class="error">
                <h3>‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                <p>${message}</p>
                <p>–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>
                <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #e74c3c; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                </button>
            </div>
        `;
	}

	hideLoading() {
		this.loadingElement.style.display = 'none';
	}
}

// ===== MAIN APPLICATION =====
class ChebufechnaApp {
	constructor() {
		this.dataService = new DataService();
		this.renderer = new Renderer();
	}

	async init() {
		try {
			// console.log('üöÄ Initializing Cheburechna App...');

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
			this.updateLoadingStatus('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...');

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
			const [categories, menuItems, locations] = await Promise.all([
				this.dataService.loadCategories(),
				this.dataService.loadMenu(),
				this.dataService.loadLocations()
			]);

			// console.log('üìä Data loaded:', {
				//categories: categories.length,
				//menuItems: menuItems.length,
				//locations: locations.length
			//});

			// –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
			this.renderer.hideLoading();

			// –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
			this.renderer.renderMenu(categories, menuItems);
			this.renderer.renderLocations(locations);

			// console.log('‚úÖ App initialized successfully!');

		} catch (error) {
			console.error('‚ùå App initialization failed:', error);
			this.renderer.showError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ: ${error.message}`);
		}
	}

	updateLoadingStatus(status) {
		const loadingElement = document.getElementById('loading');
		if (loadingElement) {
			loadingElement.innerHTML = `<h3>‚è≥ ${status}</h3>`;
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	async refresh() {
		this.dataService.cache.clear();
		await this.init();
	}
}

// ===== INITIALIZATION =====
const app = new ChebufechnaApp();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
	// –î–æ–±–∞–≤–ª—è–µ–º id="top" –∫ body –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	document.body.id = 'top';
	app.init();
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
window.refreshMenu = () => app.refresh();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('error', (event) => {
	console.error('Global error:', event.error);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// console.log('ü•ü Cheburechna script loaded!');
// console.log('üìã Endpoints:', ENDPOINTS);
// console.log('‚öôÔ∏è Config:', CONFIG);
